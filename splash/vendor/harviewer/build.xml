<?xml version="1.0" ?>

<!-- Build instruction for HAR Viewer application. In order to build final
    distribution, run: $ant build within the root directory and
    deploy files located within 'webapp-build' directory -->
<project name="HARViewer" basedir="." default="build">

    <!-- Directories -->
    <property name="app.dir" value="webapp"/>
    <property name="build.dir" value="${app.dir}-build"/>
    <property name="jsdoc.build.dir" value="${app.dir}-jsdoc"/>
    <property name="examples.dir" value="${app.dir}/examples"/>
    <property file="ant.properties"/>
    <property name="build.tools.dir" value="build-tools"/>
    <property name="rjs.version" value="2.2.0"/>
    <property name="rjs.url" value="https://github.com/requirejs/r.js/archive/${rjs.version}.zip"/>
    <property name="rjs.cmd" value="${basedir}/r.js/dist/r.js"/>
    <property name="rjs.runner" value="node"/>

    <property name="selenium.server.version" value="2.53.0"/>
    <property name="selenium.server.version.major" value="2.53"/>
    <property name="selenium.server.url" value="https://selenium-release.storage.googleapis.com/${selenium.server.version.major}/selenium-server-standalone-${selenium.server.version}.jar"/>
    <property name="iedriver.version" value="2.53.1"/>
    <property name="iedriver.filename" value="IEDriverServer_Win32_${iedriver.version}.zip"/>
    <property name="iedriver.url" value="https://selenium-release.storage.googleapis.com/${selenium.server.version.major}/${iedriver.filename}"/>
    <property name="chromedriver.version" value="2.21"/>
    <property name="chromedriver.filename" value="chromedriver_win32.zip"/>
    <property name="chromedriver.url" value="http://chromedriver.storage.googleapis.com/${chromedriver.version}/${chromedriver.filename}"/>
    <property name="geckodriver.version" value="0.8.0"/>
    <property name="geckodriver.filename" value="geckodriver-v${geckodriver.version}-win32.zip"/>
    <property name="geckodriver.url" value="https://github.com/mozilla/geckodriver/releases/download/v${geckodriver.version}/${geckodriver.filename}"/>

    <!-- Tools for building release package of HAR Viewer.
        js-build-tools: http://code.google.com/p/js-build-tools/
        js-min (ant task): http://code.google.com/p/jsmin-ant-task/
        shrink-safe: http://shrinksafe.dojotoolkit.org/ -->
    <property name="jsmin.jar" value="${build.tools.dir}/jsmin/jsmin.0.2.3.jar"/>

    <path id="js-build-tasks.classpath">
        <pathelement location="."/>
        <fileset dir="${build.tools.dir}/js-build-tools/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Task definitions -->
    <taskdef name="jsmin"
        classname="net.matthaynes.jsmin.JSMin_Task"
        classpath="${jsmin.jar}"/>
    <taskdef name="preprocess"
        classname="com.moxiecode.ant.tasks.PreProcessTask"
        classpathref="js-build-tasks.classpath"/>

    <!-- Remove the previous HAR Viewer build. -->
    <target name="clean" description="Cleans the webapp and jsdoc build folders">
        <delete dir="${build.dir}"/>
        <delete dir="${jsdoc.build.dir}"/>
    </target>





    <!--
    Downloads selenium server.  Selenium server is required for testing.
    -->
    <target name="get-iedriver" description="Downloads IEDriver and makes it available to the start-server.bat command">
        <property name="iedriver.dir" value="${basedir}/selenium/iedriver"/>
        <mkdir dir="${iedriver.dir}"/>
        <get dest="${iedriver.dir}" verbose="true">
            <url url="${iedriver.url}" />
        </get>
        <unzip src="${iedriver.dir}/${iedriver.filename}" dest="${basedir}/selenium"/>
    </target>

    <target name="get-chromedriver" description="Downloads ChromeDriver and makes it available to the start-server.bat command">
        <property name="chromedriver.dir" value="${basedir}/selenium/chromedriver"/>
        <mkdir dir="${chromedriver.dir}"/>
        <get dest="${chromedriver.dir}" verbose="true">
            <url url="${chromedriver.url}" />
        </get>
        <unzip src="${chromedriver.dir}/${chromedriver.filename}" dest="${basedir}/selenium"/>
    </target>

    <target name="get-geckodriver" description="Downloads GeckoDriver and makes it available to the start-server.bat command">
        <property name="geckodriver.dir" value="${basedir}/selenium/geckodriver"/>
        <mkdir dir="${geckodriver.dir}"/>
        <get dest="${geckodriver.dir}" verbose="true">
            <url url="${geckodriver.url}" />
        </get>
        <unzip src="${geckodriver.dir}/${geckodriver.filename}" dest="${basedir}/selenium"/>
    </target>

    <target name="get-selenium" depends="get-iedriver, get-chromedriver, get-geckodriver" description="Downloads Selenium and IE/Chrome/Gecko drivers and makes them available to the start-server.bat command">
        <get src="${selenium.server.url}" dest="${basedir}/selenium/server/selenium-server.jar" verbose="true"/>
    </target>





    <!--
    Checks for a folder named "r.js".
    If such a folder is found, sets the "rjs.present" property.
    -->
    <target name="check-rjs-folder">
        <available file="r.js" property="rjs.folder.present"/>
    </target>

    <!--
    Downloads and unpacks the r.js build tool, but only if the "r.js" folder was not found.
    Therefore, if you want to do a fresh download and unpack of r.js, delete the "r.js" folder before running ant.
    -->
    <target name="get-rjs" depends="check-rjs-folder" unless="rjs.folder.present">
        <get src="${rjs.url}" dest="r.js.zip" verbose="true" />
        <unzip src="r.js.zip" dest="r.js">
            <!-- remove the first "r.js-x.y.x" part of the folder structure -->
            <cutdirsmapper dirs="1"/>
        </unzip>
    </target>





    <!-- Determine whether to use Node.JS or Java -->
    <target name="rjs-determine-runner" depends="get-rjs">
        <condition property="rjs.runner.isNode">
            <matches pattern="^node$" string="${rjs.runner}"/>
        </condition>

        <condition property="rjs.runner.isNashorn">
            <matches pattern="^nashorn$" string="${rjs.runner}"/>
        </condition>

        <condition property="rjs.runner.isJava">
            <matches pattern="^java$" string="${rjs.runner}"/>
        </condition>

        <fail message="Ant property 'rjs.runner' must be set to either 'node' (the default), 'nashorn' or 'java'. Value was '${rjs.runner}'.">
            <condition>
                <not>
                    <or>
                        <isset property="rjs.runner.isNode"/>
                        <isset property="rjs.runner.isNashorn"/>
                        <isset property="rjs.runner.isJava"/>
                    </or>
                </not>
            </condition>
        </fail>
    </target>





    <!-- Run r.js build tool (using the chosen runner) -->
    <target name="rjs-node" depends="rjs-determine-runner" if="rjs.runner.isNode">
        <exec dir="${app.dir}/scripts" executable="node" resolveexecutable="true">
            <arg value="${rjs.cmd}"/>
            <arg value="-o"/>
            <arg value="app.build.js"/>
        </exec>
    </target>

    <target name="rjs-nashorn" depends="rjs-determine-runner" if="rjs.runner.isNashorn">
        <exec dir="${app.dir}/scripts" executable="jjs" resolveexecutable="true">
            <arg value="-scripting"/>
            <arg value="${rjs.cmd}"/>
            <arg value="--"/>
            <arg value="-o"/>
            <arg value="app.build.js"/>
        </exec>
    </target>

    <target name="rjs-java" depends="rjs-determine-runner" if="rjs.runner.isJava">
       <java fork="true" dir="${app.dir}/scripts" classname="org.mozilla.javascript.tools.shell.Main">
           <arg value="${rjs.cmd}"/>
           <arg value="-o"/>
           <arg value="app.build.js"/>
           <classpath>
               <pathelement location="${basedir}/r.js/lib/rhino/js.jar"/>
               <pathelement location="${basedir}/r.js/lib/closure/compiler.jar"/>
           </classpath>
       </java>
    </target>





    <!-- Build HAR Viewer package (the result is within build.dir) -->
    <target name="build" depends="rjs-java, rjs-node, rjs-nashorn" description="Builds HAR Viewer">

        <!-- Log info about the current OS -->
        <echo message="Building HAR Viewer on:" />
        <echo message="os.name = ${os.name}" />
        <echo message="os.arch = ${os.arch}" />
        <echo message="os.version = ${os.version}" />

        <!-- Copy fresh harSchema.js we don't want it to be compressed
            its content is displayed in the Schema tab -->
        <copy file="${app.dir}/scripts/preview/harSchema.js"
            todir="${build.dir}/scripts/preview" overwrite="true"/>

        <!-- Copy fresh domplate to the build.dir and compile using jsmin.
            The Google's Closure Compliler breaks the domplate code
            (by replacing local var names like e.g.: __path__) -->
        <copy file="${app.dir}/scripts/domplate/domplate.js"
            todir="${build.dir}/scripts/domplate" overwrite="true"/>
        <jsmin srcfile="${build.dir}/scripts/domplate/domplate.js" force="true"/>

        <!-- Preprocess script/core/trace file to avoid using the console object -->
        <preprocess infile="${app.dir}/scripts/core/trace.js"
            outfile="${build.dir}/scripts/core/trace.js" defines="_RELEASE" />

        <!-- Generate version number. The version info is loaded from 'ant.properties' file. -->
        <replace dir="${build.dir}" propertyFile="ant.properties">
            <include name="*.php" />
            <replacefilter token="@VERSION@" property="VERSION"/>
            <replacefilter token="@GOOGLE-ANALYTICS-PROFILE@" property="GOOGLE-ANALYTICS-PROFILE"/>
        </replace>

        <!-- Final version message -->
        <echo message="HAR Viewer version: ${VERSION} build OK"/>
    </target>

    <!-- Build HAR Viewer package (the result is within build.dir) -->
    <target name="clean-build" depends="clean, build" description="Calls the clean task then performs a build">
    </target>

    <!-- Support for generating docs from Firebug source code using npm jsdoc
        See the output in webapp-jsdoc directory -->
    <target name="jsdoc" description="Generate documentation">
        <echo message="Generate doc from HAR Viewer source."/>

        <!-- Clean the output direcotory -->
        <delete dir="${jsdoc.build.dir}"/>

        <!-- Parse all source files -->
        <exec dir="${basedir}" executable="node" resolveexecutable="true">
            <arg value="${basedir}/node_modules/jsdoc/jsdoc.js"/>
            <arg value="${app.dir}/scripts"/>
            <arg value="--recurse"/>
            <arg value="--configure"/>
            <arg value="${basedir}/jsdoc.conf.json"/>
            <arg value="--destination"/>
            <arg value="${jsdoc.build.dir}"/>
            <arg value="--package"/>
            <arg value="${basedir}/package.json"/>
            <arg value="--readme"/>
            <arg value="${basedir}/README.md"/>
            <arg value="--verbose"/>
            <arg value="--access"/>
            <arg value="all"/>
            <arg value="--private"/>
        </exec>
    </target>

</project>
